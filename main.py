#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Sat Oct 29 16:50:29 2022
#

import wx

from sys import platform

import ctypes, time, os, configparser, getpass, requests

# begin wxGlade: dependencies
import wx.adv
# end wxGlade

# begin wxGlade: extracode
# end wxGlade 

class appQL(wx.Frame):

    CODE_TAB="¹"
    CODE_BS="¸"
    PATH_IMAGES = "./images/"
    MARGES=["24", "32", "48", "64", "80", "96", "112", "128"]
    LIST_IMAGES=[]
    IMAGE_WIDTH=64
    IMAGE_HEIGHT=64
    config=[]
    
    def loadConfig(self,value=False):
        self.config = configparser.ConfigParser()
        self.config.read('config.ini', encoding='utf-8')
        if(value):
            self.archivesInputOwner.SetValue(self.config["archives"]["owner"])
            self.archivesInputCode.SetValue(self.config["archives"]["code"]) 
            self.addressInput.SetValue(self.config["address"]["name"])
            self.addressCivic.SetValue(self.config["address"]["civic"])
            self.addressCity.SetValue(self.config["address"]["region"])
            self.addressPostal.SetValue(self.config["address"]["postal"])
        
    def saveConfig(self):
        self.loadConfig()       
        self.config["archives"]["owner"]=str(self.archivesInputOwner.GetValue())
        self.config["archives"]["code"]=str(self.archivesInputCode.GetValue())
        self.config["address"]["name"]=str(self.addressInput.GetValue())
        self.config["address"]["civic"]=str(self.addressCivic.GetValue())
        self.config["address"]["region"]=str(self.addressCity.GetValue())
        self.config["address"]["postal"]=str(self.addressPostal.GetValue())
        with open('config.ini', 'w', encoding='utf-8') as configfile:    # save
            self.config.write(configfile)
        self.loadConfig(True)

    def goPrint(self,values,copies=1):
        self.saveConfig()
        if(copies >= 1):
            #Print to Brother QL
            copies = int(copies)
            if(self.getos() == "win"):
                #self.showMessage("Le support d'impression sous Windows n'est pas encore supporté.")
                #
                # Print via le VBS, ajout détection de commande dans les commandes par action
                # ett filer comme linux
                #
                url = 'http://'+self.config['web']['ip']+':'+self.config['web']['port']+'/print/cli'
                myobj = "parameters="+values

                x = requests.post(url, data=myobj)

                print(x.text)
            elif(self.getos()=="linux"):
                #print with core.py
                print("*** Send a job to print script; python3 core.py -v "+values)
                if(self.config['default']['debug']=="True"):
                    os.system('python3 core.py '+str(values)+' -v 1')
                else:
                    os.system('python3 core.py '+str(values))
            else:
                self.showMessage("Votre système d'explotation n'est pas supporté.")
        else:
            self.showMessage("Le nombre de copie n'est pas valide, impression anullé.")

    def showMessage(self,txt):
        appMsg.msg=txt
        dlg = appMsgBox(self)
        dlg.ShowModal()
    
    def showCopies(self):
        dlc = appCopies(self)
        dlc.ShowModal()
        printCopies = int(dlc.printQuantity.GetValue())
        if(type(printCopies) is not int or printCopies < 0):
            printCopies = 0
        return int(printCopies)

    def barcodeTab(self,event):
        code=self.barcode_input.GetValue()
        ncode=code + self.CODE_TAB
        self.barcode_input.SetValue(ncode)
        self.barcode_input.SetFocus()
        self.barcode_input.SetInsertionPointEnd()

    def barcodeDel(self,event):
        code=self.barcode_input.GetValue()
        ncode=code + self.CODE_BS
        self.barcode_input.SetValue(ncode)
        self.barcode_input.SetFocus()
        self.barcode_input.SetInsertionPointEnd()

    def textimageChangePreview(self,event):
        selected=self.LIST_IMAGES[self.textimageImage.GetSelection()]
        bitmap = wx.Bitmap(self.PATH_IMAGES + selected)
        bitmap = self.scale_bitmap(bitmap, 64, 64)
        self.textimagePreview.SetBitmap(bitmap)
        
    def scale_bitmap(self,bitmap, width, height):
        image = wx.ImageFromBitmap(bitmap)
        image = image.Scale(width, height, wx.IMAGE_QUALITY_HIGH)
        result = wx.BitmapFromImage(image)
        return result

    def __init__(self, *args, **kwds):
        # begin wxGlade: appQL.__init__
        global LIST_IMAGES
        self.LIST_IMAGES=self.getImages(self.PATH_IMAGES)
        appw,apph=wx.DisplaySize()
        
        if(self.getos()=="linux"):
            kwds["style"] = kwds.get("style", 0) | wx.MAXIMIZE
            wx.Frame.__init__(self, *args, **kwds)
            self.SetSize((appw,(apph+40)))
            #self.SetSize((480, 320))
            #self.SetSize(wx.DisplaySize())
            self.SetPosition((10,10))
            wx.CallAfter(self.SetPosition, (0, 0))
        else:
            kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
            wx.Frame.__init__(self, *args, **kwds)
            self.SetSize((480, 320))
            self.Centre()
            
        self.loadConfig()
        self.SetTitle(u"Étiquetteuse Brother QL")
        width,height = self.GetSize()
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("app.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.appSections = wx.Notebook(self, wx.ID_ANY, style=wx.NB_MULTILINE | wx.NB_TOP)
        self.appSections.SetFont(wx.Font(10, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_LIGHT, 0, ""))

        self.appSectionAbout = wx.Panel(self.appSections, wx.ID_ANY)
        self.appSections.AddPage(self.appSectionAbout, "A Propos")

        gridSectionAbout = wx.FlexGridSizer(3, 3, 0, 0)

        gridSectionAbout.Add((20, 20), 0, 0, 0)

        gridSectionAbout.Add((0, 0), 0, 0, 0)

        gridSectionAbout.Add((20, 20), 0, 0, 0)

        gridSectionAbout.Add((0, 0), 0, 0, 0)

        gridAboutContent = wx.FlexGridSizer(1, 2, 0, 10)
        gridSectionAbout.Add(gridAboutContent, 1, wx.EXPAND, 0)

        gridAboutContentLeft = wx.FlexGridSizer(6, 1, 5, 0)
        gridAboutContent.Add(gridAboutContentLeft, 1, wx.EXPAND, 0)

        labelAppName = wx.StaticText(self.appSectionAbout, wx.ID_ANY, "RPI-QL")
        labelAppName.SetForegroundColour(wx.Colour(0, 127, 255))
        labelAppName.SetFont(wx.Font(24, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        gridAboutContentLeft.Add(labelAppName, 0, 0, 0)

        labelAppDescription = wx.StaticText(self.appSectionAbout, wx.ID_ANY, u"Étiquetteuse Brother QL pour Raspberry Pi")
        labelAppDescription.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        gridAboutContentLeft.Add(labelAppDescription, 0, 0, 0)

        labelAppVersion = wx.StaticText(self.appSectionAbout, wx.ID_ANY, "v1.2.1106")
        gridAboutContentLeft.Add(labelAppVersion, 0, 0, 0)

        label_20 = wx.StaticText(self.appSectionAbout, wx.ID_ANY, u"Créé par Mathieu Légaré (levelKro)")
        gridAboutContentLeft.Add(label_20, 0, wx.ALIGN_CENTER, 0)

        self.hyperlink_1 = wx.adv.HyperlinkCtrl(self.appSectionAbout, wx.ID_ANY, "Visiter le site de l'auteur", "https://levelkro.com", style=wx.adv.HL_ALIGN_CENTRE)
        gridAboutContentLeft.Add(self.hyperlink_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.hyperlink_2 = wx.adv.HyperlinkCtrl(self.appSectionAbout, wx.ID_ANY, "Visiter la page du projet", "https://github.com/levelKro", style=wx.adv.HL_ALIGN_CENTRE)
        gridAboutContentLeft.Add(self.hyperlink_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        logo = wx.StaticBitmap(self.appSectionAbout, wx.ID_ANY, wx.Bitmap("./logo.ico", wx.BITMAP_TYPE_ANY))
        gridAboutContent.Add(logo, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        gridSectionAbout.Add((0, 0), 0, 0, 0)

        gridSectionAbout.Add((20, 20), 0, 0, 0)

        gridSectionAbout.Add((0, 0), 0, 0, 0)

        gridSectionAbout.Add((20, 20), 0, 0, 0)

        self.appSectionText = wx.Panel(self.appSections, wx.ID_ANY)
        self.appSections.AddPage(self.appSectionText, "Texte")

        gridSectionText = wx.FlexGridSizer(3, 3, 0, 0)

        gridSectionText.Add((20, 20), 0, 0, 0)

        gridSectionText.Add((0, 0), 0, 0, 0)

        gridSectionText.Add((20, 20), 0, 0, 0)

        gridSectionText.Add((0, 0), 0, 0, 0)

        gridTextContent = wx.FlexGridSizer(2, 3, 5, 5)
        gridSectionText.Add(gridTextContent, 1, wx.EXPAND, 0)

        labelText = wx.StaticText(self.appSectionText, wx.ID_ANY, "Texte :")
        gridTextContent.Add(labelText, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.textInput = wx.TextCtrl(self.appSectionText, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridTextContent.Add(self.textInput, 0, wx.EXPAND, 0)

        self.textType = wx.Choice(self.appSectionText, wx.ID_ANY, choices=["Texte","Texte large (Banderole)", "Câble"])
        self.textType.SetSelection(0)
        gridTextContent.Add(self.textType, 0, 0, 0)

        gridTextContent.Add((0, 0), 0, 0, 0)

        gridTextContent.Add((0, 0), 0, 0, 0)

        self.textPrint = wx.Button(self.appSectionText, wx.ID_ANY, "Imprimer")
        self.textPrint.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        gridTextContent.Add(self.textPrint, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        gridSectionText.Add((0, 0), 0, 0, 0)

        gridSectionText.Add((20, 20), 0, 0, 0)

        gridSectionText.Add((0, 0), 0, 0, 0)

        gridSectionText.Add((20, 20), 0, 0, 0)

        self.appSectionTextImage = wx.Panel(self.appSections, wx.ID_ANY)
        self.appSections.AddPage(self.appSectionTextImage, "Texte et image")

        gridSectionTextImage = wx.FlexGridSizer(3, 3, 0, 0)

        gridSectionTextImage.Add((20, 20), 0, 0, 0)

        gridSectionTextImage.Add((0, 0), 0, 0, 0)

        gridSectionTextImage.Add((20, 20), 0, 0, 0)

        gridSectionTextImage.Add((0, 0), 0, 0, 0)

        gridTextimageContent = wx.FlexGridSizer(5, 3, 5, 5)
        gridSectionTextImage.Add(gridTextimageContent, 1, wx.EXPAND, 0)

        labelextimageText = wx.StaticText(self.appSectionTextImage, wx.ID_ANY, "Texte :")
        gridTextimageContent.Add(labelextimageText, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.textimageInput = wx.TextCtrl(self.appSectionTextImage, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridTextimageContent.Add(self.textimageInput, 0, wx.EXPAND, 0)

        gridTextimageContent.Add((0, 0), 0, 0, 0)

        labelTextimageDimensions = wx.StaticText(self.appSectionTextImage, wx.ID_ANY, "Taille max :")
        gridTextimageContent.Add(labelTextimageDimensions, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        gridTextimageDimensions = wx.FlexGridSizer(1, 4, 0, 5)
        gridTextimageContent.Add(gridTextimageDimensions, 1, wx.ALIGN_CENTER, 0)

        labelTextimageWidth = wx.StaticText(self.appSectionTextImage, wx.ID_ANY, "Largeur :")
        gridTextimageDimensions.Add(labelTextimageWidth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.textimageMaxWidth = wx.ComboBox(self.appSectionTextImage, wx.ID_ANY, choices=self.MARGES, style=wx.CB_DROPDOWN | wx.TE_PROCESS_ENTER)
        self.textimageMaxWidth.SetSelection(4)
        gridTextimageDimensions.Add(self.textimageMaxWidth, 0, 0, 0)

        labelTextimageHeight = wx.StaticText(self.appSectionTextImage, wx.ID_ANY, "Hauteur :")
        gridTextimageDimensions.Add(labelTextimageHeight, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.textimageMaxHeight = wx.ComboBox(self.appSectionTextImage, wx.ID_ANY, choices=self.MARGES, style=wx.CB_DROPDOWN | wx.TE_PROCESS_ENTER)
        self.textimageMaxHeight.SetSelection(4)
        gridTextimageDimensions.Add(self.textimageMaxHeight, 0, 0, 0)

        self.textimageMode = wx.Choice(self.appSectionTextImage, wx.ID_ANY, choices=["Largeur (Wide)", "Hauteur (Portrait)"])
        self.textimageMode.SetSelection(0)
        gridTextimageContent.Add(self.textimageMode, 0, 0, 0)

        labelTextimageImage = wx.StaticText(self.appSectionTextImage, wx.ID_ANY, "Image :")
        gridTextimageContent.Add(labelTextimageImage, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.textimageImage = wx.Choice(self.appSectionTextImage, wx.ID_ANY, choices=self.LIST_IMAGES)
        self.textimageImage.SetSelection(0)
        gridTextimageContent.Add(self.textimageImage, 0, wx.EXPAND, 0)

        self.textimageDirection = wx.Choice(self.appSectionTextImage, wx.ID_ANY, choices=["Gauche", "Droite"])
        self.textimageDirection.SetSelection(0)
        gridTextimageContent.Add(self.textimageDirection, 0, 0, 0)

        gridTextimageContent.Add((0, 0), 0, 0, 0)

        self.textimagePreview = wx.StaticBitmap(self.appSectionTextImage, wx.ID_ANY, self.scale_bitmap(wx.Bitmap(self.PATH_IMAGES + self.LIST_IMAGES[0], wx.BITMAP_TYPE_ANY),self.IMAGE_WIDTH,self.IMAGE_HEIGHT))
        gridTextimageContent.Add(self.textimagePreview, 0, 0, 0)

        gridTextimageContent.Add((0, 0), 0, 0, 0)

        gridTextimageContent.Add((0, 0), 0, 0, 0)

        gridTextimageContent.Add((0, 0), 0, 0, 0)

        self.textimagePrint = wx.Button(self.appSectionTextImage, wx.ID_ANY, "Imprimer")
        self.textimagePrint.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        gridTextimageContent.Add(self.textimagePrint, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        gridSectionTextImage.Add((0, 0), 0, 0, 0)

        gridSectionTextImage.Add((20, 20), 0, 0, 0)

        gridSectionTextImage.Add((0, 0), 0, 0, 0)

        gridSectionTextImage.Add((20, 20), 0, 0, 0)


        self.appSectionBarcode = wx.Panel(self.appSections, wx.ID_ANY)
        self.appSections.AddPage(self.appSectionBarcode, "Code Barre")

        gridSectionBarcode = wx.FlexGridSizer(3, 3, 0, 0)

        gridSectionBarcode.Add((20, 20), 0, 0, 0)

        gridSectionBarcode.Add((0, 0), 0, 0, 0)

        gridSectionBarcode.Add((20, 20), 0, 0, 0)

        gridSectionBarcode.Add((0, 0), 0, 0, 0)

        gridBarcodeContent = wx.FlexGridSizer(4, 3, 5, 5)
        gridSectionBarcode.Add(gridBarcodeContent, 1, wx.EXPAND, 0)

        labelBarcodeText = wx.StaticText(self.appSectionBarcode, wx.ID_ANY, "Texte / Titre :")
        gridBarcodeContent.Add(labelBarcodeText, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.barcodeInputText = wx.TextCtrl(self.appSectionBarcode, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridBarcodeContent.Add(self.barcodeInputText, 0, wx.EXPAND, 0)

        gridBarcodeContent.Add((0, 0), 0, 0, 0)

        labelBarcodeCode = wx.StaticText(self.appSectionBarcode, wx.ID_ANY, u"Texte à encoder :")
        gridBarcodeContent.Add(labelBarcodeCode, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.barcodeInputCode = wx.TextCtrl(self.appSectionBarcode, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridBarcodeContent.Add(self.barcodeInputCode, 0, wx.EXPAND, 0)

        self.barcodeDirection = wx.ComboBox(self.appSectionBarcode, wx.ID_ANY, choices=["Code en bas", "Code en haut"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.barcodeDirection.SetSelection(0)
        gridBarcodeContent.Add(self.barcodeDirection, 0, 0, 0)

        labelBarcodeSub = wx.StaticText(self.appSectionBarcode, wx.ID_ANY, "Texte sous code :")
        gridBarcodeContent.Add(labelBarcodeSub, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.barcodeInputSub = wx.TextCtrl(self.appSectionBarcode, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridBarcodeContent.Add(self.barcodeInputSub, 0, wx.EXPAND, 0)

        self.barcodeSub = wx.CheckBox(self.appSectionBarcode, wx.ID_ANY, "Afficher")
        gridBarcodeContent.Add(self.barcodeSub, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        gridBarcodeContent.Add((0, 0), 0, 0, 0)

        gridBarcodeContent.Add((0, 0), 0, 0, 0)

        self.barcodePrint = wx.Button(self.appSectionBarcode, wx.ID_ANY, "Imprimer")
        self.barcodePrint.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        gridBarcodeContent.Add(self.barcodePrint, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        gridSectionBarcode.Add((0, 0), 0, 0, 0)

        gridSectionBarcode.Add((20, 20), 0, 0, 0)

        gridSectionBarcode.Add((0, 0), 0, 0, 0)

        gridSectionBarcode.Add((20, 20), 0, 0, 0)

        self.appSectionArchives = wx.Panel(self.appSections, wx.ID_ANY)
        self.appSections.AddPage(self.appSectionArchives, "Archives")

        gridSectionArchives = wx.FlexGridSizer(3, 3, 0, 0)

        gridSectionArchives.Add((20, 20), 0, 0, 0)

        gridSectionArchives.Add((0, 0), 0, 0, 0)

        gridSectionArchives.Add((20, 20), 0, 0, 0)

        gridSectionArchives.Add((0, 0), 0, 0, 0)

        gridArchivesContent = wx.FlexGridSizer(4, 3, 5, 5)
        gridSectionArchives.Add(gridArchivesContent, 1, wx.EXPAND, 0)

        labelArchivesText = wx.StaticText(self.appSectionArchives, wx.ID_ANY, "Nom / Descriptif :")
        gridArchivesContent.Add(labelArchivesText, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.archivesInputText = wx.TextCtrl(self.appSectionArchives, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridArchivesContent.Add(self.archivesInputText, 0, wx.EXPAND, 0)

        gridArchivesContent.Add((0, 0), 0, 0, 0)

        labelArchivesOwner = wx.StaticText(self.appSectionArchives, wx.ID_ANY, u"Propriétaire :")
        gridArchivesContent.Add(labelArchivesOwner, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.archivesInputOwner = wx.TextCtrl(self.appSectionArchives, wx.ID_ANY, u"Propriété de John Doe - 1-800-555-1987", style=wx.TE_PROCESS_ENTER)
        gridArchivesContent.Add(self.archivesInputOwner, 0, wx.EXPAND, 0)

        self.archivesOwnerVisible = wx.CheckBox(self.appSectionArchives, wx.ID_ANY, "Visible")
        gridArchivesContent.Add(self.archivesOwnerVisible, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        labelArchivesCode = wx.StaticText(self.appSectionArchives, wx.ID_ANY, "Code :")
        gridArchivesContent.Add(labelArchivesCode, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.archivesInputCode = wx.SpinCtrl(self.appSectionArchives, wx.ID_ANY, "0", min=0, max=99999, style=wx.TE_PROCESS_ENTER)
        gridArchivesContent.Add(self.archivesInputCode, 0, 0, 0)

        gridArchivesContent.Add((0, 0), 0, 0, 0)

        gridArchivesContent.Add((0, 0), 0, 0, 0)

        gridArchivesContent.Add((0, 0), 0, 0, 0)

        self.archivesPrint = wx.Button(self.appSectionArchives, wx.ID_ANY, "Imprimer")
        self.archivesPrint.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        gridArchivesContent.Add(self.archivesPrint, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        gridSectionArchives.Add((0, 0), 0, 0, 0)

        gridSectionArchives.Add((20, 20), 0, 0, 0)

        gridSectionArchives.Add((0, 0), 0, 0, 0)

        gridSectionArchives.Add((20, 20), 0, 0, 0)

        self.appSectionExpire = wx.Panel(self.appSections, wx.ID_ANY)
        self.appSections.AddPage(self.appSectionExpire, "Expiration")

        gridSectionExpire = wx.FlexGridSizer(3, 3, 0, 0)

        gridSectionExpire.Add((20, 20), 0, 0, 0)

        gridSectionExpire.Add((0, 0), 0, 0, 0)

        gridSectionExpire.Add((20, 20), 0, 0, 0)

        gridSectionExpire.Add((0, 0), 0, 0, 0)

        gridExpireContent = wx.FlexGridSizer(4, 3, 5, 5)
        gridSectionExpire.Add(gridExpireContent, 1, wx.EXPAND, 0)

        label_11 = wx.StaticText(self.appSectionExpire, wx.ID_ANY, "Nom / Descriptif :")
        gridExpireContent.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.expireInput = wx.TextCtrl(self.appSectionExpire, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridExpireContent.Add(self.expireInput, 0, wx.EXPAND, 0)

        gridExpireContent.Add((0, 0), 0, 0, 0)

        label_12 = wx.StaticText(self.appSectionExpire, wx.ID_ANY, u"Emballé le :")
        gridExpireContent.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.expireDateIn = wx.adv.DatePickerCtrl(self.appSectionExpire, wx.ID_ANY, style=wx.adv.DP_DEFAULT | wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY | wx.TE_PROCESS_ENTER)
        gridExpireContent.Add(self.expireDateIn, 0, 0, 0)

        self.expireDateInVisible = wx.CheckBox(self.appSectionExpire, wx.ID_ANY, "Visible")
        gridExpireContent.Add(self.expireDateInVisible, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_13 = wx.StaticText(self.appSectionExpire, wx.ID_ANY, "Expire le :")
        gridExpireContent.Add(label_13, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.expireDateOut = wx.adv.DatePickerCtrl(self.appSectionExpire, wx.ID_ANY, style=wx.adv.DP_DEFAULT | wx.adv.DP_DROPDOWN | wx.adv.DP_SHOWCENTURY | wx.TE_PROCESS_ENTER)
        gridExpireContent.Add(self.expireDateOut, 0, 0, 0)

        self.expireDateOutVisible = wx.CheckBox(self.appSectionExpire, wx.ID_ANY, "Visible")
        gridExpireContent.Add(self.expireDateOutVisible, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        gridExpireContent.Add((0, 0), 0, 0, 0)

        gridExpireContent.Add((0, 0), 0, 0, 0)

        self.expirePrint = wx.Button(self.appSectionExpire, wx.ID_ANY, "Imprimer")
        self.expirePrint.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        gridExpireContent.Add(self.expirePrint, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        gridSectionExpire.Add((0, 0), 0, 0, 0)

        gridSectionExpire.Add((20, 20), 0, 0, 0)

        gridSectionExpire.Add((0, 0), 0, 0, 0)

        gridSectionExpire.Add((20, 20), 0, 0, 0)

        self.appSectionAddress = wx.Panel(self.appSections, wx.ID_ANY)
        self.appSections.AddPage(self.appSectionAddress, "Adresse")

        gridSectionAddress = wx.FlexGridSizer(3, 3, 0, 0)

        gridSectionAddress.Add((20, 20), 0, 0, 0)

        gridSectionAddress.Add((0, 0), 0, 0, 0)

        gridSectionAddress.Add((20, 20), 0, 0, 0)

        gridSectionAddress.Add((0, 0), 0, 0, 0)

        gridAddressContent = wx.FlexGridSizer(5, 2, 5, 5)
        gridSectionAddress.Add(gridAddressContent, 1, wx.EXPAND, 0)

        label_14 = wx.StaticText(self.appSectionAddress, wx.ID_ANY, "Nom :")
        gridAddressContent.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.addressInput = wx.TextCtrl(self.appSectionAddress, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridAddressContent.Add(self.addressInput, 0, wx.EXPAND, 0)

        label_15 = wx.StaticText(self.appSectionAddress, wx.ID_ANY, u"Adresse civic et rue :")
        gridAddressContent.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.addressCivic = wx.TextCtrl(self.appSectionAddress, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridAddressContent.Add(self.addressCivic, 0, wx.EXPAND, 0)

        label_16 = wx.StaticText(self.appSectionAddress, wx.ID_ANY, "Vile, région, Pays :")
        gridAddressContent.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.addressCity = wx.TextCtrl(self.appSectionAddress, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridAddressContent.Add(self.addressCity, 0, wx.EXPAND, 0)

        label_17 = wx.StaticText(self.appSectionAddress, wx.ID_ANY, "Code postal :")
        gridAddressContent.Add(label_17, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.addressPostal = wx.TextCtrl(self.appSectionAddress, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        gridAddressContent.Add(self.addressPostal, 0, wx.EXPAND, 0)

        gridAddressContent.Add((0, 0), 0, 0, 0)

        self.addressPrint = wx.Button(self.appSectionAddress, wx.ID_ANY, "Imprimer")
        self.addressPrint.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        gridAddressContent.Add(self.addressPrint, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)

        gridSectionAddress.Add((0, 0), 0, 0, 0)

        gridSectionAddress.Add((20, 20), 0, 0, 0)

        gridSectionAddress.Add((0, 0), 0, 0, 0)

        gridSectionAddress.Add((20, 20), 0, 0, 0)


        gridSectionAddress.AddGrowableRow(1)
        gridSectionAddress.AddGrowableCol(1)

        gridAddressContent.AddGrowableRow(4)
        gridAddressContent.AddGrowableCol(1)


        gridTextContent.AddGrowableRow(1)
        gridTextContent.AddGrowableCol(1)

        gridSectionText.AddGrowableRow(1)
        gridSectionText.AddGrowableCol(1)

        gridTextimageContent.AddGrowableRow(4)
        gridTextimageContent.AddGrowableCol(1)

        gridSectionTextImage.AddGrowableRow(1)
        gridSectionTextImage.AddGrowableCol(1)

        gridExpireContent.AddGrowableRow(3)
        gridExpireContent.AddGrowableCol(1)

        gridSectionExpire.AddGrowableRow(1)
        gridSectionExpire.AddGrowableCol(1)

        gridArchivesContent.AddGrowableRow(3)
        gridArchivesContent.AddGrowableCol(1)

        gridSectionArchives.AddGrowableRow(1)
        gridSectionArchives.AddGrowableCol(1)

        gridBarcodeContent.AddGrowableRow(3)
        gridBarcodeContent.AddGrowableCol(1)

        gridSectionBarcode.AddGrowableRow(1)
        gridSectionBarcode.AddGrowableCol(1)

        gridAboutContentLeft.AddGrowableCol(0)

        gridAboutContent.AddGrowableRow(0)
        gridAboutContent.AddGrowableCol(0)

        gridSectionAbout.AddGrowableRow(1)
        gridSectionAbout.AddGrowableCol(1)
        
        self.appSectionAddress.SetSizer(gridSectionAddress)
        self.appSectionExpire.SetSizer(gridSectionExpire)
        self.appSectionArchives.SetSizer(gridSectionArchives)
        self.appSectionBarcode.SetSizer(gridSectionBarcode)
        self.appSectionTextImage.SetSizer(gridSectionTextImage)
        self.appSectionText.SetSizer(gridSectionText)
        self.appSectionAbout.SetSizer(gridSectionAbout)

        self.Layout()
        self.Centre()
        
        self.Bind(wx.EVT_BUTTON, self.printBarcode, self.barcodePrint)
        self.Bind(wx.EVT_BUTTON, self.printArchives, self.archivesPrint)
        self.Bind(wx.EVT_BUTTON, self.printText, self.textPrint)
        self.Bind(wx.EVT_BUTTON, self.printTextimage, self.textimagePrint)
        self.Bind(wx.EVT_BUTTON, self.printExpire, self.expirePrint)
        self.Bind(wx.EVT_BUTTON, self.printAddress, self.addressPrint)
                
        self.barcodeInputText.Bind(wx.EVT_TEXT_ENTER, self.printBarcode)
        self.barcodeInputCode.Bind(wx.EVT_TEXT_ENTER, self.printBarcode)
        self.barcodeInputSub.Bind(wx.EVT_TEXT_ENTER, self.printBarcode)
                
        self.archivesInputText.Bind(wx.EVT_TEXT_ENTER, self.printArchives)
        self.archivesInputCode.Bind(wx.EVT_TEXT_ENTER, self.printArchives)
        self.archivesInputOwner.Bind(wx.EVT_TEXT_ENTER, self.printArchives)
        
        self.textInput.Bind(wx.EVT_TEXT_ENTER, self.printText)
        
        self.textimageInput.Bind(wx.EVT_TEXT_ENTER, self.printTextimage)
        self.textimageMaxWidth.Bind(wx.EVT_TEXT_ENTER, self.printTextimage)
        self.textimageMaxHeight.Bind(wx.EVT_TEXT_ENTER, self.printTextimage)
        
        self.expireInput.Bind(wx.EVT_TEXT_ENTER, self.printExpire)        
        self.expireDateIn.Bind(wx.EVT_TEXT_ENTER, self.printExpire)        
        self.expireDateOut.Bind(wx.EVT_TEXT_ENTER, self.printExpire)
        
        self.addressInput.Bind(wx.EVT_TEXT_ENTER, self.printAddress)        
        self.addressCivic.Bind(wx.EVT_TEXT_ENTER, self.printAddress)        
        self.addressCity.Bind(wx.EVT_TEXT_ENTER, self.printAddress)        
        self.addressPostal.Bind(wx.EVT_TEXT_ENTER, self.printAddress)
        
        self.textimageImage.Bind(wx.EVT_CHOICE, self.textimageChangePreview)
    
        self.expireDateInVisible.SetValue(1)
        self.loadConfig(True)
        # end wxGlade
        
    def printBarcode(self, event):
        text = str(self.barcodeInputText.GetValue())
        code = str(self.barcodeInputCode.GetValue())
        sub = str(self.barcodeInputCode.GetValue())
        subVisible = self.barcodeSub.IsChecked()
        codeDirection = self.barcodeDirection.GetSelection()
        if(text==""):
            self.showMessage("Vous devez définir un texte.")
        elif(code==""):
            self.showMessage("Vous devez définir un code pour le code à barre.")
        else:
            copies = self.showCopies()
            values ='-a barcode -t "'+text+'" -c "'+code+'"'
            if(subVisible):
                values=values+' -s "'+sub+'"'
            if(codeDirection == 1):
                values=values+' -d "up"'
            else:
                values=values+' -d "down"'
            self.goPrint(values,copies)
            try:
                event.Skip()
            except:
                pass

    def printArchives(self, event):
        text = str(self.archivesInputText.GetValue())
        code = int(self.archivesInputCode.GetValue())
        owner = str(self.archivesInputOwner.GetValue())
        ownerVisible = self.archivesOwnerVisible.IsChecked()
        if(text==""):
            self.showMessage("Vous devez définir un texte.")
        elif(code==""):
            self.showMessage("Vous devez définir un code pour le code à barre.")
        elif(code>99999 or type(code) is not int):
            self.showMessage("Le code doit être un nombre entre 0 et 99999.")
        else:
            copies = self.showCopies()
            code=str(code)
            while(len(code) < 5):
                code="0"+code
            values ='-a archive -t "'+text+'" -c "'+code+'"'
            if(ownerVisible and owner!=""):
                values=values+' -n "'+owner+'"'
            self.goPrint(values,copies)
            try:
                event.Skip()
            except:
                pass

    def printText(self, event):
        text = str(self.textInput.GetValue())
        textType = str(self.textimageDirection.GetSelection())
        if(text==""):
            self.showMessage("Vous devez définir un texte.")
        else:
            copies = self.showCopies()
            if(textType=="1"):
                values ='-a textlarge -t "'+text+'"'
            elif(textType=="2"):
                values ='-a cable -t "'+text+'"'
            else:
                values ='-a text -t "'+text+'"'
            self.goPrint(values,copies)
            try:
                event.Skip()
            except:
                pass

    def printTextimage(self, event):
        text = str(self.textimageInput.GetValue())
        image = str(self.PATH_IMAGES + self.LIST_IMAGES[self.textimageImage.GetSelection()])
        imageDirection = str(self.textimageDirection.GetSelection())
        imageWidth = int(self.textimageMaxWidth.GetValue())
        imageHeight = int(self.textimageMaxHeight.GetValue())
        if(text==""):
            self.showMessage("Vous devez définir un texte.")
        elif(image==""):
            self.showMessage("Vous devez définir une image.")
        else:
            copies = self.showCopies()
            values ='-a textimage -t "'+text+'" -i "'+image+'"'
            if(imageWidth>=1):
                values=values+' -x '+str(imageWidth)
            if(imageHeight>=1):
                values=values+' -y '+str(imageHeight)
            if(imageDirection=="1"):
                values=values+' -d "right"'
            else:
                values=values+' -d "left"'
            self.goPrint(values,copies)
            try:
                event.Skip()
            except:
                pass

    def printExpire(self, event):
        text = str(self.expireInput.GetValue())
        dateIn = str(self.expireDateIn.GetValue()).replace(" 00:00:00","")
        dateOut = str(self.expireDateOut.GetValue()).replace(" 00:00:00","")
        dateInVisible = self.expireDateInVisible.IsChecked()
        dateOutVisible = self.expireDateOutVisible.IsChecked()
        if(dateIn=="" and dateInVisible):
            self.showMessage("Vous devez définir la date d'emballage.")
        elif(dateOut=="" and dateOutVisible):
            self.showMessage("Vous devez définir la date d'expiration.")
        elif(dateOutVisible is False and dateInVisible is False):
            self.showMessage("Vous devez afficher la date d'emballage et/ou la date d'expiration.")
        else:
            copies = self.showCopies()
            values ='-a expire'
            if(text!=""):
                values=values+' -t "'+text+'"'
            if(dateInVisible):
                values=values+' -n "'+str(dateIn)+'"'
            if(dateOutVisible):
                values=values+' -s "'+dateOut+'"'
            self.goPrint(values,copies)
            try:
                event.Skip()
            except:
                pass

    def printAddress(self, event):
        text = str(self.addressInput.GetValue())
        civic = str(self.addressCivic.GetValue())
        city = str(self.addressCity.GetValue())
        code = str(self.addressPostal.GetValue())
        if(civic==""):
            self.showMessage("L'information de l'adresse civic et le nom de la rue es manquant.")
        elif(city==""):
            self.showMessage("L'information de la viles, région, pays est manquant.")
        elif(code==""):
            self.showMessage("Le code postal est manquant.")
        else:
            copies = self.showCopies()
            values ='-a address -n "'+civic+'" -s "'+city+'" -c "'+code+'"'
            if(text!=""):
                values=values+' -t "'+text+'"'
            self.goPrint(values,copies)
            print(values)
            try:
                event.Skip()
            except:
                pass
    
    def getos(self):
        if platform == "linux" or platform == "linux2":
            # linux
            return "linux"
        elif platform == "darwin":
            # OS X
            return "mac"
        elif platform == "win32":
            # Windows
            return "win"
    def getImages(self,path):
        images=[]
        for x in os.listdir(path):
            if x.endswith(".jpg") or x.endswith(".png") or x.endswith(".ico"):
                images.append(x)
        return images
# end of class appQL
class appMessage:
    msg=""
    def __init__(self, msg):
        self.msg=""
        
class appMsgBox(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: appMsgBox.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Message")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("app.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.dialog_text = wx.StaticText(self, wx.ID_ANY, appMsg.msg)
        sizer_1.Add(self.dialog_text, 0, wx.ALL | wx.EXPAND, 10)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_CLOSE = wx.Button(self, wx.ID_CLOSE, "Ok")
        sizer_2.AddButton(self.button_CLOSE)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetEscapeId(self.button_CLOSE.GetId())

        self.Layout()
        self.Centre()
        # end wxGlade

# end of class appMsgBox

class appCopies(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: appCopies.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((240, 110))
        self.SetTitle(u"Nombre de copie à imprimer")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("app.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1 = wx.FlexGridSizer(1, 2, 5, 5)
        sizer_1.Add(grid_sizer_1, 0, wx.EXPAND, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Nombre de copie :")
        grid_sizer_1.Add(label_1, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.printQuantity = wx.TextCtrl(self, wx.ID_ANY, "1")
        
        #bug, too large
        #self.printQuantity = wx.SpinCtrl(self, wx.ID_ANY, "0",min=0, max=100, style=wx.TE_PROCESS_ENTER)
        
        self.printQuantity.SetFocus()     
        grid_sizer_1.Add(self.printQuantity, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_2 = wx.FlexGridSizer(2, 2, 5, 5)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_2.Add(0, 0, 0, 0)
        sizer_2.Add(0, 0, 0, 0)
        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "Annuler")
        self.button_OK = wx.Button(self, wx.ID_OK, "Imprimer")
        sizer_2.Add(self.button_CANCEL, 0, wx.ALIGN_RIGHT, 0)
        sizer_2.Add(self.button_OK, 0, 0, 0)
        grid_sizer_1.AddGrowableCol(0)
        grid_sizer_1.AddGrowableCol(1)
        sizer_2.AddGrowableCol(0)
        sizer_2.AddGrowableCol(1)
        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        self.Centre()
        appw,apph=wx.DisplaySize()
        posl=int((appw - 240) / 2)
        post=int((apph - 110) / 2)
        self.SetPosition((posl,post))
        wx.CallAfter(self.SetPosition,(posl,post))
        # end wxGlade
        
    def OnCancel(self,event):
        self.printQuantity.SetValue("0")
        event.Skip()

# end of class MyCopies

class rpiQL(wx.App):
    def OnInit(self):
        self.frame = appQL(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class rpiQL

if __name__ == "__main__":
    app = rpiQL(0)
    appMsg = appMessage(0)
    app.MainLoop()
